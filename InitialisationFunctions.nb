r[s_, p_] := 
 MapThread[
  If[Abs[#1] <= (k0 + 1)/2, #2*\[CapitalDelta]t0*2 E^(-(energyconstant/4))*E^(-((energyconstant*#1^2)/(1 + k0)))*Cosh[#1*energyconstant],1] &, {s, Unitize[p]}]

g[s_, p_] := (1 - Unitize[p])*\[CapitalDelta]t0*kon/2*timeconstant*(Erf[(s + 0.5)*Sqrt[energyconstant]] - Erf[(s - 0.5)*Sqrt[energyconstant]])

neighbourtest[criterion_] := 
  Module[{n = 0}, 
   While[(g[d0*(0.5 + n), 0]/g[0, 0]) > criterion, n++]; n];

swrapped[s_] := Mod[s, d0, -d0/2];

positionslistplus[s_] := Prepend[
   Table[i*d0 - swrapped[s]
    , {i, neighbourtest[neighbourcriterion]}
    ]
   , swrapped[s]];

positionslistminus[s_] := Prepend[
   Table[i*d0 + swrapped[s]
    , {i, neighbourtest[neighbourcriterion]}]
   , Last[positionslistplus[s]]];

attachmentfunctionplus[s_, p_, r1_] := 
  If[neighbourtest[neighbourcriterion] > 0,
   Total[
    Table[
      i*(1 - Unitize[p]), {i, 2, 
       neighbourtest[neighbourcriterion] + 1}]*MapThread[
      (MapThread[(Boole[#1 > #2]) &, {r1, #1}]*
         MapThread[(Boole[#1 < #2]) &, {r1, #2}]) &
      , Transpose[
       Partition[
        Accumulate[
         Map[
          g[#, p] &, positionslistplus[s]]
         ]
        , 2, 1]
       ]
      ]
    ]
   , 0];

attachmentfunctionminus[s_, p_, r1_] := 
  If[neighbourtest[neighbourcriterion] > 0,
   Total[
    Table[-i*(1 - Unitize[p]), {i, 1, 
       neighbourtest[neighbourcriterion]}]*MapThread[
      (MapThread[(Boole[#1 > #2]) &, {r1, #1}]*
         MapThread[(Boole[#1 < #2]) &, {r1, #2}]) &
      , Transpose[
       Partition[
        Accumulate[
         Map[
          g[#, p] &, positionslistminus[s]]
         ]
        , 2, 1]
       ]
      ]
    ]
   , 0];

cumulativeprob[s_, p_] := If[neighbourtest[neighbourcriterion] > 0,
   Last[
    Accumulate[
     Map[
      g[#, p] &, positionslistminus[s]]
     ]
    ]
   , g[swrapped[s], p]];

trajectorybindingstate[x_] := 
  Table[{pathvector[[i, 1]], pathvector[[i, 2, x]]}, {i, 
    Nrealisation + 1}];

trajectoryload[x_] := 
  Table[{pathvector[[i, 1]], pathvector[[i, 3, x]]}, {i, 
    Nrealisation + 1}];

trajectoryloadvsdisplacement[x_] := 
  Table[{prescribeddisplacementlinear[[i]], 
    pathvector[[i, 3, x]]}, {i, Nrealisation + 1}];

cycletrajectorybindingstate[x_] := 
  Table[{cyclepathvector[[i, 1]], cyclepathvector[[i, 2, x]]}, {i, 
    Length[cyclepathvector]}];

cycletrajectoryload[x_] := 
  Table[{cyclepathvector[[i, 1]], cyclepathvector[[i, 3, x]]}, {i, 
    Length[cyclepathvector]}];

cycletrajectoryloadvsdisplacement[x_] := 
  Table[{prescribeddisplacementcycle[[i]], 
    cyclepathvector[[i, 3, x]]}, {i, Length[cyclepathvector]}];

averageloadextractor[x_, averagestartpoint_(*en s*), averageendpoint_(*en s*)] := {Mean[
    Transpose[
      x[[IntegerPart[averagestartpoint/\[CapitalDelta]t0 + 1] ;; 
        IntegerPart[averageendpoint/\[CapitalDelta]t0 + 1]]]][[2]]], 
   StandardDeviation[
    Transpose[
      x[[IntegerPart[averagestartpoint/\[CapitalDelta]t0 + 1] ;; 
        IntegerPart[averageendpoint/\[CapitalDelta]t0 + 1]]]][[2]]]};