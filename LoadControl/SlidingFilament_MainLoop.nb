SetAttributes[unidirectionaltractionexperimentloadcontrolled2,
  HoldFirst];
unidirectionaltractionexperimentloadcontrolled[pathvectorname_, n_,
  fprescribed_, initialpvector_,
  Nrealisation_, {konarg_, timeconstantarg_, k0arg_,
   energyconstantarg_, d0arg_,
   neighbourcriterionarg_}(*microparameters*)] :=

 Module[{\[CapitalDelta]f, s, p, r1, nattached, numberofneighbours,
   bygoneheadspositionlist, totalrate, attachedpositionlist,
   detachedpositionlist, ratelist, indexofnextevent,
   timeuntilnextevent, nexteventpick, attachmenttransitionratematrix,
   detachmentratelist, listofattachedstates, t = 0},
  Block[{kon = konarg, timeconstant = timeconstantarg, k0 = k0arg,
     energyconstant = energyconstantarg, d0 = d0arg,
     neighbourcriterion = neighbourcriterionarg},
    parametersforexport = {Nrealisation, kon, timeconstant, k0,
      energyconstant, d0, neighbourcriterion, n, initialpvector,
      fprescribed};
    numberofneighbours = neighbourtest[neighbourcriterion];
    listofattachedstates =
     Table[i, {i, -numberofneighbours, -1}]~
      Join~(Table[i, {i, 0, numberofneighbours}] + 1);
    s = Table[RandomReal[{-d0/2, d0/2}], {n}];
    p = Table[RandomChoice[initialpvector -> {0., 1.}], {n}];
    nattached = initialpvector[[-1]]*n;
    \[CapitalDelta]f = Total[Total[
       (Table[1. - N[Unitize[p - i]]
           , {i,
            Table[i, {i, 2 - neighbourtest[neighbourcriterion], -1,
               1}]~Join~
             Table[i, {i, 2, neighbourtest[neighbourcriterion]}]}
           ]*Table[-i*d0 + s
           , {i,
            Table[i, {i, 2 - neighbourtest[neighbourcriterion], -1,
               1}]~Join~
             Table[i, {i, 2, neighbourtest[neighbourcriterion]}]}
           ])~Join~{((1. - N[Unitize[p - 1.]])*s)}
       ]];

    pathvectorname = Reap[
      (*System evolution loop*)
      Catch[Do[
         Sow[t, tag1];
         Sow[
          MapThread[(If[Negative[#1] == False, #1 + #2,
              If[#2 == 1, #1 + #2 - 1, #1 + #2]]) &, {Quotient[s,
             d0, -d0/2], p}], tag2];
         Sow[s, tag3];
         Sow[\[CapitalDelta]f/nattached, tag4];

         If[
          Total[N[Unitize[
              Floor[N[Unitize[(Floor[Abs[s]/((k0 + 1.)/2.)])]]]]]] >
           0,(*check whether some heads have gone by the Kramers \
validity range*)

          bygoneheadspositionlist =
           Flatten[
            SparseArray[N[Unitize[Floor[Abs[s]/((k0 + 1.)/2.)]]]][
             "NonzeroPositions"]];

          indexofnextevent =
           Last[First[
             SortBy[Transpose[{s[[bygoneheadspositionlist]],
                bygoneheadspositionlist}],
              Abs[First[#]] &]]];(*set indexofnextevent to be that of \
the farthest head which has gone by the Kramers validity range*)

               timeuntilnextevent = 0;
          p[[indexofnextevent]] = 0;,


          attachmenttransitionratematrix =
           attachmenttransitionratematrixgenerator[s, p];
          detachmentratelist = detachmentrate[s, p];

          totalrate =
           Total[Map[Total, attachmenttransitionratematrix]] +
            Total[detachmentratelist];

          detachedpositionlist =
           Flatten[
            SparseArray[detachmentratelist]["NonzeroPositions"]];

          attachedpositionlist =
           Complement[Range[n], detachedpositionlist];

          ratelist =
           Transpose[{Flatten[
               attachmenttransitionratematrix[[
                attachedpositionlist]]],
              Flatten[
               Transpose[
                Table[attachedpositionlist, {2*numberofneighbours +
                   1}]]],
              Flatten[
               Table[{-1, 1, 2}, {Length[attachedpositionlist]}]]}]~
            Join~Transpose[{detachmentratelist[[
               detachedpositionlist]], detachedpositionlist,
              ConstantArray[0., Length[detachedpositionlist]]}];

          timeuntilnextevent =
           RandomVariate[ExponentialDistribution[totalrate]];

          nexteventpick =
           RandomChoice[
            Flatten[
               attachmenttransitionratematrix[[
                attachedpositionlist]]]~Join~
              detachmentratelist[[detachedpositionlist]] ->
             ratelist];
          indexofnextevent = nexteventpick[[2]];
          p[[indexofnextevent]] = nexteventpick[[3]];
          ];

         \[CapitalDelta]f = fprescribed - Total[Total[
             (Table[1 - N[Unitize[p - i]]
                 , {i,
                  Table[i, {i,
                    2 - neighbourtest[neighbourcriterion], -1, 1}]~
                   Join~Table[
                    i, {i, 2, neighbourtest[neighbourcriterion]}]}
                 ]*Table[-i*d0 + s
                 , {i,
                  Table[i, {i,
                    2 - neighbourtest[neighbourcriterion], -1, 1}]~
                   Join~Table[
                    i, {i, 2, neighbourtest[neighbourcriterion]}]}
                 ])~Join~{((1. - N[Unitize[p - 1]])*s)}
             ]];
         nattached = Total[Unitize[p]];
         If[nattached == 0,
          Throw["All heads detached at step "]];(*Attach the step at \
which computation was aborted later when pathvector content is \
accessible*)

         s = (1. - N[Unitize[p]])*
            Mod[s + (\[CapitalDelta]f/nattached), d0, -d0/2] +
           N[Unitize[p]]*(s + (\[CapitalDelta]f/nattached));
         t = t + timeuntilnextevent;
         , {Nrealisation + 1}];
       ]
      ];
    AppendTo[pathvectorname[[2]], fprescribed];
    If[StringQ[pathvectorname[[1]]] == True,
     pathvectorname[[1]] =
      pathvectorname[[1]] <>
       IntegerString[
        Length[pathvectorname[[2, 1]]] +
         1]](*If the computation has stopped,
    attach the abort step to the thrown string*)
    ];
  ]
