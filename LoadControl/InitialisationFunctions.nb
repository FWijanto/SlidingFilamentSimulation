detachmentrate[s_, p_] :=
 N[Unitize[p]]*2 E^(-(energyconstant/4))*
  E^(-((energyconstant*s^2)/(1 + k0)))*Cosh[s*energyconstant](*k^-*)

attachmentrate[s_, p_] := (1. - N[Unitize[p]])*kon/2*
  timeconstant*(Erf[(s + 0.5)*Sqrt[energyconstant]] -
    Erf[(s - 0.5)*Sqrt[energyconstant]])(*k^+*)

neighbourtest[criterion_] :=
  Module[{n = 0},
   While[(g[d0*(0.5 + n), 0]/g[0, 0]) > criterion, n++]; n];
swrapped[s_] := Mod[s, d0, -d0/2];
positionslistplus[s_] := Prepend[
   Table[i*d0 - swrapped[s]
    , {i, neighbourtest[neighbourcriterion]}
    ]
   , swrapped[s]];
positionslistminus[s_] := Prepend[
   Table[i*d0 + swrapped[s]
    , {i, neighbourtest[neighbourcriterion]}]
   , Last[positionslistplus[s]]];

attachmenttransitionratematrixgenerator[s_, p_] :=
 Module[{headpositionswithneighbours, numberofneighbours},
  numberofneighbours = neighbourtest[neighbourcriterion];
  headpositionswithneighbours =
   Reap[Do[Sow[swrapped[s] + i*d0], {i, -numberofneighbours,
       numberofneighbours, 1}]][[-1,
    1]];(*Generate table of s positions with nearest neighbour offset \
with structure: {...,row of (s-2d0), row of (s-d0), row of (s),
  row of (s+d0), row of (s+2d0),...}*)

  Transpose[
   Map[attachmentrate[#, p] &,
    headpositionswithneighbours]](*Get the transition rates \
corresponding to each s. Lists of 0s correspond to attached heads*)
  ]

waitingtimegenerator[attachmenttransitionratematrix_,
   detachmentratelist_, s_, p_] :=
  Map[
    RandomVariate[ExponentialDistribution[#]] &,
    Map[Total, attachmenttransitionratematrix] + detachmentratelist
    ]*((N[
        1. - Unitize[(-Floor[
             Abs[s]/((k0 + 1)/2)])]](*Filter that gives 1 if |s|<(
       k0+1)/2 and 0 if not*)*N[Unitize[p]]) + (1. -
       N[Unitize[
         p]]))(*Map[] module gives waiting time based on exponential \
distribution of given transition rates. It is then multiplied with a \
filter that puts to 0 the waiting times of attached heads which are \
beyond the Kramers validity range ((k0+1)/2).*);
